// –°–∏—Å—Ç–µ–º–∞ —Å–∂–∞—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è URL –≤ Linkoo

// –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
const COMPRESSION_MAP = {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    name: 'n',
    title: 't',
    description: 'd',
    email: 'e',
    phone: 'p',
    website: 'w',
    avatar: 'a',

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ–±—É–∫–≤–µ–Ω–Ω—ã–µ –∫–æ–¥—ã)
    socials: 's',
    telegram: 'tg',
    whatsapp: 'wa',
    instagram: 'ig',
    youtube: 'yt',
    linkedin: 'li',
    twitter: 'tw',
    facebook: 'fb',
    github: 'gh',
    tiktok: 'tk',
    discord: 'dc',
    vk: 'vk',
    custom: 'cu',

    // –¢–µ–º–∞ –∏ —Å—Ç–∏–ª—å
    theme: 'th',
    customTheme: 'ct',

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    company: 'co',
    location: 'lo',
    birthday: 'bd',
    skills: 'sk',
    languages: 'lg',
    portfolio: 'pf',
    resume: 'rs',
    calendar: 'cl',
    payment: 'py',

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    showEmail: 'se',
    showPhone: 'sp',
    showLocation: 'sl',
};

// –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
const DECOMPRESSION_MAP = Object.fromEntries(Object.entries(COMPRESSION_MAP).map(([key, value]) => [value, key]));

// –°–∂–∞—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
export const compressCardData = (data) => {
    try {
        const compressed = {};

        // –°–∂–∏–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        Object.entries(data).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                const compressedKey = COMPRESSION_MAP[key] || key;

                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
                if (key === 'socials' && Array.isArray(value)) {
                    const compressedSocials = value
                        .filter(social => social.platform && social.link)
                        .map(social => ({
                            [COMPRESSION_MAP[social.platform] || social.platform]: social.link
                        }));

                    if (compressedSocials.length > 0) {
                        compressed[compressedKey] = compressedSocials;
                    }
                } else {
                    compressed[compressedKey] = value;
                }
            }
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
        const jsonString = JSON.stringify(compressed);
        const base64 = btoa(unescape(encodeURIComponent(jsonString)));

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ - —É–±–∏—Ä–∞–µ–º padding
        return base64.replace(/=/g, '');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return null;
    }
};

// –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∂–∞—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
export const decompressCardData = (compressedData) => {
    try {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º padding –¥–ª—è base64
        let base64 = compressedData;
        while (base64.length % 4) {
            base64 += '=';
        }

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
        const jsonString = decodeURIComponent(escape(atob(base64)));
        const compressed = JSON.parse(jsonString);

        const decompressed = {};

        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è
        Object.entries(compressed).forEach(([key, value]) => {
            const originalKey = DECOMPRESSION_MAP[key] || key;

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
            if (key === 's' && Array.isArray(value)) { // 's' = socials
                decompressed.socials = value.map(socialObj => {
                    const [[platform, link]] = Object.entries(socialObj);
                    return {
                        platform: DECOMPRESSION_MAP[platform] || platform, link: link
                    };
                });
            } else {
                decompressed[originalKey] = value;
            }
        });

        return decompressed;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return {};
    }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ URL —Å –¥–∞–Ω–Ω—ã–º–∏
export const generateCardUrl = (cardData, baseUrl = window.location.origin) => {
    const compressed = compressCardData(cardData);
    if (!compressed) return null;

    const currentPath = window.location.pathname;
    const basePath = currentPath.endsWith('/') ? currentPath : currentPath + '/';

    return `${baseUrl}${basePath}?card=${compressed}`;
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL
export const extractCardDataFromUrl = (url = window.location.href) => {
    try {
        const urlObj = new URL(url);
        const cardParam = urlObj.searchParams.get('card');

        if (!cardParam) {
            return null;
        }

        return decompressCardData(cardParam);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL:', error);
        return null;
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const getCompressedSize = (cardData) => {
    const compressed = compressCardData(cardData);
    return compressed ? compressed.length : 0;
};

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è
export const getCompressionStats = (cardData) => {
    const original = JSON.stringify(cardData);
    const compressed = compressCardData(cardData);

    if (!compressed) return null;

    const originalSize = original.length;
    const compressedSize = compressed.length;
    const ratio = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);

    return {
        originalSize, compressedSize, compressionRatio: ratio, savedBytes: originalSize - compressedSize,
    };
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const validateCompressedData = (compressedData) => {
    try {
        const decompressed = decompressCardData(compressedData);
        return decompressed && typeof decompressed === 'object';
    } catch {
        return false;
    }
};

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
export const ultraCompress = (cardData) => {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const essential = {};

    // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
    const essentialFields = ['name', 'title', 'email', 'phone', 'socials', 'theme'];

    essentialFields.forEach(field => {
        if (cardData[field] && cardData[field] !== '') {
            essential[field] = cardData[field];
        }
    });

    // –°–∂–∏–º–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–æ –º–∏–Ω–∏–º—É–º–∞
    if (essential.socials) {
        essential.socials = essential.socials
            .filter(s => s.platform && s.link)
            .slice(0, 5) // –ú–∞–∫—Å–∏–º—É–º 5 —Å–æ—Ü—Å–µ—Ç–µ–π
            .map(s => ({
                platform: s.platform, link: s.link.replace(/^https?:\/\//, '') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            }));
    }

    return compressCardData(essential);
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-friendly URL (–∫–æ—Ä–æ—Ç–∫–∏–π)
export const generateQrUrl = (cardData, baseUrl = window.location.origin) => {
    const ultraCompressed = ultraCompress(cardData);
    if (!ultraCompressed) return null;

    return `${baseUrl}/?c=${ultraCompressed}`;
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ QR URL
export const extractFromQrUrl = (url) => {
    try {
        const urlObj = new URL(url);
        const cardParam = urlObj.searchParams.get('c') || urlObj.searchParams.get('card');

        if (!cardParam) return null;

        const decompressed = decompressCardData(cardParam);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        if (decompressed.socials) {
            decompressed.socials = decompressed.socials.map(social => ({
                ...social, link: social.link.startsWith('http') ? social.link : `https://${social.link}`
            }));
        }

        return decompressed;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö:', error);
        return null;
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ URL (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
export const checkUrlLimits = (url) => {
    const length = url.length;

    return {
        length, withinChrome: length < 2048,      // Chrome limit
        withinFirefox: length < 65536,    // Firefox limit
        withinSafari: length < 80000,     // Safari limit
        withinIE: length < 2083,          // IE limit (legacy)
        recommended: length < 2000,       // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ª–∏–º–∏—Ç
    };
};

// –°–∂–∞—Ç–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
export const prepareForShortener = (cardData) => {
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–µ—é—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–ª–∏–Ω—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ URL
    const stats = getCompressionStats(cardData);

    if (stats && stats.compressedSize > 1800) {
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—å—Ç—Ä–∞-—Å–∂–∞—Ç–∏–µ
        return ultraCompress(cardData);
    }

    return compressCardData(cardData);
};

// üÜï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ö–†–ê–©–ï–ù–ò–Ø –°–°–´–õ–û–ö

// –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (—É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã)
export const shortenUrl = async (url) => {
    // –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (—Å CORS-–ø—Ä–æ–∫—Å–∏)
    const services = [
        {
            name: 'TinyURL',
            url: `https://api.allorigins.win/get?url=${encodeURIComponent('https://tinyurl.com/api-create.php?url=' + encodeURIComponent(url))}`
        },
        {
            name: 'is.gd',
            url: `https://api.allorigins.win/get?url=${encodeURIComponent('https://is.gd/create.php?format=simple&url=' + encodeURIComponent(url))}`
        }
    ];

    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    for (const service of services) {
        try {
            const response = await fetch(service.url);
            if (response.ok) {
                const data = await response.json();
                const shortUrl = data.contents.trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É (—É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏–Ω—ã)
                if (shortUrl.startsWith('http')) {
                    return {
                        success: true,
                        shortUrl: shortUrl,
                        service: service.name
                    };
                }
            }
        } catch (error) {
            console.log(`–û—à–∏–±–∫–∞ —Å ${service.name}:`, error);
            continue;
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã',
        fallbackServices: [
            { name: 'TinyURL', url: 'https://tinyurl.com' },
            { name: 'Bit.ly', url: 'https://bit.ly' },
            { name: 'Is.gd', url: 'https://is.gd' }
        ]
    };
};

// –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
export const showShortenDialog = (url, onSuccess, onClose) => {
    const dialog = document.createElement('div');
    dialog.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;

    dialog.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 90%;
            text-align: center;
        ">
            <h3 style="margin-bottom: 20px; color: #333;">üîó –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏</h3>
            <p style="margin-bottom: 20px; color: #666;">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:
            </p>
            <div style="display: flex; flex-direction: column; gap: 15px;">
                <button onclick="window.open('https://tinyurl.com/app', '_blank')" 
                        style="padding: 12px; background: #667eea; color: white; border: none; border-radius: 8px; cursor: pointer;">
                    üì± TinyURL.com - –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                </button>
                <button onclick="window.open('https://bit.ly', '_blank')" 
                        style="padding: 12px; background: #ff6b35; color: white; border: none; border-radius: 8px; cursor: pointer;">
                    üî• Bit.ly - –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                </button>
                <button onclick="window.open('https://is.gd', '_blank')" 
                        style="padding: 12px; background: #28a745; color: white; border: none; border-radius: 8px; cursor: pointer;">
                    ‚ö° Is.gd - –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                </button>
                <button onclick="copyToClipboard('${url}'); document.body.removeChild(this.closest('div').parentElement)" 
                        style="padding: 12px; background: #6c757d; color: white; border: none; border-radius: 8px; cursor: pointer;">
                    üìã –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                </button>
            </div>
            <button onclick="document.body.removeChild(this.closest('div').parentElement)" 
                    style="margin-top: 20px; padding: 8px 20px; background: #e9ecef; border: none; border-radius: 8px; cursor: pointer;">
                ‚úï –ó–∞–∫—Ä—ã—Ç—å
            </button>
        </div>
    `;

    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ)
    window.copyToClipboard = window.copyToClipboard || function(text) {
        navigator.clipboard.writeText(text).then(() => {
            if (onSuccess) onSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
        }).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            if (onSuccess) onSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
        });
    };

    document.body.appendChild(dialog);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
    dialog.addEventListener('click', (e) => {
        if (e.target === dialog) {
            document.body.removeChild(dialog);
            if (onClose) onClose();
        }
    });

    return dialog;
};
